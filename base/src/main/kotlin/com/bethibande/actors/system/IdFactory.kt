package com.bethibande.actors.system

import com.bethibande.actors.registry.ActorId
import com.bethibande.actors.registry.ActorType
import java.util.UUID
import java.util.concurrent.atomic.AtomicLong

fun interface IdFactory {

    companion object {

        /**
         * Creates a new [IdFactory] that generates [ActorId]s of type [ActorId.ActorIdLong].
         * Each [ActorId] is generated by incrementing a counter.
         *
         * @return a new instance of [IdFactory]
         */
        fun localLongIdFactory(): IdFactory {
            val counter = AtomicLong(0)
            return IdFactory {
                ActorId.ActorIdLong(counter.getAndIncrement())
            }
        }

        /**
         * Generates an [IdFactory] that creates [ActorId]s of type [ActorId.ActorIdUUID].
         * Each [ActorId] is generated using a random UUID.
         *
         * @return an instance of [IdFactory] that generates [ActorId]s of type [ActorId.ActorIdUUID]
         */
        fun uuidIdFactory(): IdFactory {
            return IdFactory {
                ActorId.ActorIdUUID(UUID.randomUUID())
            }
        }
    }

    fun createId(type: ActorType): ActorId

}

